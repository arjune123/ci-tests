# -*- python -*-
# ex: set filetype=python:
from buildbot.plugins import *
from buildbot.changes.gerritchangesource import GerritChangeFilter
from datetime import timedelta
c = BuildmasterConfig = {}

# all secrets in here
from local import (CLIENT_ID, CLIENT_SECRET, ID_RSA, WORKER_PASS)

####### WORKERS
c['workers'] = []
c['workers'].append(worker.Worker("worker1", WORKER_PASS))
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES
gerrit_url = "review.gerrithub.io"
gerrit_user = "gandi-nfs-ganesha"
gerrit_port = "29418"
gerrit_project = "ffilz/nfs-ganesha"

gerrit_repo = "ssh://{}@{}:{}/{}".format(gerrit_user, gerrit_url, gerrit_port, gerrit_project)
c['change_source'] = []
c['change_source'].append(changes.GerritChangeSource(
	gerritserver=gerrit_url,
	username=gerrit_user, handled_events=["patchset-created"]))

####### SCHEDULERS
c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="all",
                            change_filter=util.GerritChangeFilter(branch='next', eventtype="patchset-created"),
                            treeStableTimer=None,
                            builderNames=["ganesha_build"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["ganesha_build"]))

####### BUILDERS
c['builders'] = []
ganesha_buildsteps = [
		steps.Gerrit(repourl=gerrit_repo, mode="full", submodules=True, sshPrivateKey=ID_RSA),
                steps.CMake(definitions={
                    # https://svnweb.freebsd.org/ports/head/net/nfs-ganesha/
                    "LIB_INSTALL_DIR":'/usr/local/lib',
                    "USE_GSS":"OFF",
                    "USE_9P":"OFF",
                    "USE_FSAL_PROXY":"OFF",
                    "USE_FSAL_GPFS":"OFF",
                    "USE_FSAL_CEPH":"OFF",
                    "USE_FSAL_GLUSTER":"OFF",
                    "USE_FSAL_RGW":"OFF",
                    "USE_FSAL_RECOV":"OFF",
                    "USE_RPCBIND":"OFF",
                    "USE_DBUS":"ON",
                    "USE_ADMIN_TOOLS":"ON",
                    # non gandi options
                    # "USE_FSAL_XFS":"OFF",
                    # "ALLOCATOR":"libc", #should use jemalloc?
                    }, path="src"),
                steps.Compile(command=["make", "-j5"], warningPattern="^Warning:"),
                steps.ShellCommand(name="install", command=["make", "install"]),
	]

f_compil = util.BuildFactory(ganesha_buildsteps)
f_common = util.BuildFactory([steps.ShellCommand(command=["ssh", client_ip, "/opt/buildbot/master/client/00-common.sh")])
c['builders'].append(
    util.BuilderConfig(name="ganesha_build",
      workernames=["worker1"],
      factory=f_compil))
c['builders'].append(
    util.BuilderConfig(name="ganesha_build",
      workernames=["worker1"],
      factory=f_common))

####### BUILDBOT SERVICES
def gerritReviewCB(builderName, build, result, master, arg):
    if result == util.RETRY:
        return dict()

    message =  "Buildbot finished compiling your patchset\n"
    message += "on configuration: %s\n" % builderName
    message += "The result is: %s\n" % util.Results[result].upper()

    if arg:
        message += "\nFor more details visit:\n"
        message += build['url'] + "\n"

    if result == util.SUCCESS:
        verified = 1
    else:
        verified = -1

    return dict(message=message, labels={'Verified': verified})

def gerritStartCB(builderName, build, arg):
    message = "Buildbot started compiling your patchset\n"
    message += "on configuration: %s\n" % builderName
    message += "See your build here: %s" % build['url']

    return dict(message=message)

def gerritSummaryCB(buildInfoList, results, status, arg):
    success = False
    failure = False

    msgs = []

    for buildInfo in buildInfoList:
        msg = "Builder %(name)s %(resultText)s (%(text)s)" % buildInfo
        link = buildInfo.get('url', None)
        if link:
            msg += " - " + link
        else:
            msg += "."

        msgs.append(msg)

        if buildInfo['result'] == util.SUCCESS:
            success = True
        else:
            failure = True

    if success and not failure:
        verified = 1
    else:
        verified = -1

    return dict(message='\n\n'.join(msgs),
                labels={
                    'Verified': verified
                })

c['buildbotURL'] = 'http://buildbot.example.com/'
c['services'] = []
#c['services'].append(status.GerritStatusPush(gerrit_url, gerrit_user,
#                                           reviewCB=gerritReviewCB,
#                                           reviewArg=c['buildbotURL'],
#                                           startCB=gerritStartCB,
#                                           startArg=c['buildbotURL'],
#                                           summaryCB=gerritSummaryCB,
#                                           summaryArg=c['buildbotURL']))

####### PROJECT IDENTITY
c['title'] = "Gandi nfs-ganesha CI"
c['titleURL'] = "https://review.gerrithub.io/q/project:ffilz%252Fnfs-ganesha"
c['buildbotURL'] = "http://92.243.17.131/" #ganesha-ci1
c['db'] = { 'db_url' : "sqlite:///state.sqlite", }
c['www'] = {
	'port': 80,
	'plugins': dict(waterfall_view={}, console_view={}, grid_view={}),
	# GitHubAuth with apiVersion=4 is broken
	#'auth': util.GitHubAuth(CLIENT_ID, CLIENT_SECRET, apiVersion=4, getTeamsMembership=True),
	'auth': util.GitHubAuth(CLIENT_ID, CLIENT_SECRET),
	'authz': util.Authz(
		allowRules = [
                    #buildbot admins
                    util.AnyEndpointMatcher(role="admins", defaultDeny=False),

                    #allow ci-test-maintainers
                    util.StopBuildEndpointMatcher(role="owner", defaultDeny=False),
                    util.StopBuildEndpointMatcher(role="ci-tests-maintainers"),
                    util.RebuildBuildEndpointMatcher(role="owner", defaultDeny=False),
                    util.RebuildBuildEndpointMatcher(role="ci-tests-maintainers"),
                    util.ForceBuildEndpointMatcher(role="owner", defaultDeny=False),
                    util.ForceBuildEndpointMatcher(role="ci-tests-maintainers"),
                    util.EnableSchedulerEndpointMatcher(role="owner", defaultDeny=False),
                    util.EnableSchedulerEndpointMatcher(role="ci-tests-maintainers"),
                    # future proof
                    util.AnyControlEndpointMatcher(role="admins"),
                ],
		roleMatchers = [
                    util.RolesFromUsername(roles=['admins'], usernames=['jzck']),
                    # groups only work with apiVersion=4 but its broken...
                    util.RolesFromGroups(groupPrefix='nfs-ganesha/'),
                    util.RolesFromOwner(role='owner'),
                ]),
}
c['buildbotNetUsageData'] = None

c['configurators'] = []
c['configurators'].append(util.JanitorConfigurator(
	logHorizon=timedelta(weeks=3),
	hour=12,
	dayOfWeek=6,
))
